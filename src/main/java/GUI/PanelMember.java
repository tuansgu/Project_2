/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BLL.BLLThanhVien;
import DAL.thanhvien;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pc
 */
public class PanelMember extends javax.swing.JPanel {
    private BLLThanhVien thanhVienBLL;
    private DefaultTableModel tableModel;
    JPopupMenu popupMenu = new JPopupMenu();
    JMenuItem deleteMenuItem;
    JMenuItem updateMenuItem;
    /**
     * Creates new form GUIMember
     */
    public PanelMember() {
        thanhVienBLL = new BLLThanhVien();
        initComponents();
        deleteMenuItem = new JMenuItem("Delete");
        updateMenuItem = new JMenuItem("Update");
        popupMenu.add(deleteMenuItem);
        popupMenu.add(updateMenuItem);
        
        deleteMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = qltv_table.getSelectedRow();
                if (selectedRow != -1) {
                    int maTV = (int) qltv_table.getValueAt(selectedRow, 0);
                    
                    List<Integer> distinctMaTVs = thanhVienBLL.getDistinctMaTV();
                    for(Integer maTvItem : distinctMaTVs) {
                        if(maTV == maTvItem) {
                            JOptionPane.showMessageDialog(null, "Không thể xoá thành viên đang sử dụng hoặc đang bị phạt!", "Fail", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                    }
                    if (thanhVienBLL.deleteThanhVien(maTV)) {
                        displayDataInTable();
                        loadTriggerYearCombobox();
                        JOptionPane.showMessageDialog(null, "Xóa thành viên thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Xóa thành viên thất bại!", "Fail", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        });
        
        updateMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) { // Sửa "actionPerfomed" thành "actionPerformed"
                int selectedRow = qltv_table.getSelectedRow();
                if (selectedRow != -1) {
                    int maTV = (int) qltv_table.getValueAt(selectedRow, 0);
                    String hoTen = (String) qltv_table.getValueAt(selectedRow, 1); 
                    String khoa = (String) qltv_table.getValueAt(selectedRow, 2); 
                    String nganh = (String) qltv_table.getValueAt(selectedRow, 3); 
                    String sdt = (String) qltv_table.getValueAt(selectedRow, 4); 
                    String password = (String) qltv_table.getValueAt(selectedRow, 5); 
                    String email = (String) qltv_table.getValueAt(selectedRow, 6); 
                    UpdateMemberDlg updateDlg = new UpdateMemberDlg(new javax.swing.JFrame(), true, maTV, hoTen, khoa, nganh, sdt, password, email);
                    updateDlg.setVisible(true);
                }
                displayDataInTable();
            }
        });
        displayDataInTable();
        loadTriggerYearCombobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        qltv_table = new javax.swing.JTable();
        qltv_label = new javax.swing.JLabel();
        add_tv = new javax.swing.JButton();
        import_tv = new javax.swing.JButton();
        reload_tv = new javax.swing.JButton();
        search_tv = new javax.swing.JButton();
        input_tv = new javax.swing.JTextField();
        xoaNhieuCmb = new javax.swing.JComboBox<>();

        qltv_table.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        qltv_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã thành viên", "Họ và tên", "Khoa", "Ngành", "Số điện thoại", "Password", "Email"
            }
        ));
        qltv_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                qltv_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(qltv_table);

        qltv_label.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        qltv_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        qltv_label.setText("Quản lý thành viên");

        add_tv.setText("Thêm thành viên");
        add_tv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_tvActionPerformed(evt);
            }
        });

        import_tv.setText("Import");
        import_tv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                import_tvActionPerformed(evt);
            }
        });

        reload_tv.setText("Reload");
        reload_tv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reload_tvActionPerformed(evt);
            }
        });

        search_tv.setText("Search");
        search_tv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_tvActionPerformed(evt);
            }
        });

        xoaNhieuCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(add_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(import_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(input_tv))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(reload_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(search_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(88, 88, 88)
                .addComponent(xoaNhieuCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(361, 361, 361)
                .addComponent(qltv_label, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(387, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(qltv_label, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(import_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reload_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_tv, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xoaNhieuCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void displayDataInTable() {
        List<thanhvien> listThanhVien = thanhVienBLL.getAllThanhVien();

        DefaultTableModel model = (DefaultTableModel) qltv_table.getModel();
        model.setRowCount(0); // Clear the table before adding new data

        for (thanhvien tv : listThanhVien) {
            Object[] row = {
                tv.getMaTV(),
                tv.getHoTen(),
                tv.getKhoa(),
                tv.getNganh(),
                tv.getSdt(),
                tv.getPassword(),
                tv.getEmail()
            };
            model.addRow(row);
        }
    }
    private void add_tvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_tvActionPerformed
        InsertMemberDlg insertMember = new InsertMemberDlg(new javax.swing.JFrame(), true);
        insertMember.setVisible(true);
        displayDataInTable();
    }//GEN-LAST:event_add_tvActionPerformed

    private void import_tvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_import_tvActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            // Gọi phương thức import từ tệp Excel ở đây
            if (thanhVienBLL.importFromExcel(selectedFile)) {
                JOptionPane.showMessageDialog(null, "Import thành công!");
                displayDataInTable();
            } else {
                JOptionPane.showMessageDialog(this, "Import thất bại", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

        }
        
    }//GEN-LAST:event_import_tvActionPerformed

    public void searchData() {
        String inputSearch = input_tv.getText();
        if (inputSearch.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập giá trị cần tìm kiếm", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        List<thanhvien> searchResult = thanhVienBLL.searchData(inputSearch);

        DefaultTableModel model = (DefaultTableModel) qltv_table.getModel();
        model.setRowCount(0); // Clear the table before adding new data

        for (thanhvien tv : searchResult) {
            Object[] row = {
                tv.getMaTV(),
                tv.getHoTen(),
                tv.getKhoa(),
                tv.getNganh(),
                tv.getSdt(),
                tv.getPassword(),
                tv.getPassword()
            };
            model.addRow(row);
        }
    }
    
    private void reload_tvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reload_tvActionPerformed
        displayDataInTable();
    }//GEN-LAST:event_reload_tvActionPerformed

    private void qltv_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_qltv_tableMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            int row = qltv_table.rowAtPoint(evt.getPoint());
            qltv_table.getSelectionModel().setSelectionInterval(row, row);
            popupMenu.show(qltv_table, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_qltv_tableMouseClicked

    private void search_tvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_tvActionPerformed
        searchData();
    }//GEN-LAST:event_search_tvActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_tv;
    private javax.swing.JButton import_tv;
    private javax.swing.JTextField input_tv;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel qltv_label;
    private javax.swing.JTable qltv_table;
    private javax.swing.JButton reload_tv;
    private javax.swing.JButton search_tv;
    private javax.swing.JComboBox<String> xoaNhieuCmb;
    // End of variables declaration//GEN-END:variables

    private void loadTriggerYearCombobox() {
        List<String> triggerYears = thanhVienBLL.loadTriggerYear();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        model.addElement("Chọn năm kích hoạt để xoá");

        for(String triggerYear : triggerYears) {
            model.addElement(triggerYear);
        }

        xoaNhieuCmb.setModel(model);
        xoaNhieuCmb.setSelectedIndex(0);

        xoaNhieuCmb.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    String selectedYear = (String) xoaNhieuCmb.getSelectedItem();
                    int choice = JOptionPane.showConfirmDialog(null, "Bạn có chắc muốn xóa không?", "Xác nhận xoá", JOptionPane.YES_NO_OPTION);
                    
                    if (choice == JOptionPane.YES_OPTION) {
                        boolean success = thanhVienBLL.deleteThanhVienByTriggerYear(selectedYear);
                        
                        if (success) {
                            JOptionPane.showMessageDialog(null, "Xóa thành viên thành công!", "Success", JOptionPane.INFORMATION_MESSAGE);
                            loadTriggerYearCombobox();
                            displayDataInTable();
                        } else {
                            JOptionPane.showMessageDialog(null, "Xóa thành viên thất bại!", "Fail", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
        });
    }


}
